#+TITLE:disentangle 
#+AUTHOR: Ivan Hanigan
#+email: ivan.hanigan@anu.edu.au
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LATEX: \tableofcontents
-----
* Introduction
* func
** newnode
*** test-newnode
#+name:newnode
#+begin_src R :session *R* :tangle tests/test-newnode.r :exports none :eval no
  ################################################################
  # name:newnode
  source("R/newnode.r")
  nodes <- newnode("merge", c("d1", "d2", "d3"), c("EDA"),
                   newgraph =T)
  nodes <- newnode("qc", c("data1", "data2", "data3"), c("d1", "d2", "d3"))
  nodes <- newnode("modelling", "EDA")
  nodes <- newnode("model checking", "modelling", c("data checking", "reporting"))
  
#+end_src
*** R-newnode
#+name:newnode
#+begin_src R :session *R* :tangle R/newnode.r :exports none :eval no
################################################################
# name:newnode
newnode<-function(name, inputs=NA, outputs=NA, graph = 'nodes', newgraph=F, notes=F, code=NA, ttype=NA, plot = T){
  # USAGE
  # nodes <- newnode(  # adds to a graph called nodes
  # name = 'aquire the raw data'  # the name of the node being added 
  # inputs = REQUIRED c('external sources','collected by researcher') # single or multiple inputs to it
  # outputs = OPTIONAL c('file server','metadata','cleaning') # single or multiple outputs from it
  # append=F # append to existing graph?  if False remove old graph of that name and start new
  # TODO 
  # nodes <- addEdge(from='analyse using stats package',
  # to='new data in database server',graph=nodes,weights=1)
  # INIT
  # source('http://bioconductor.org/biocLite.R')
  # biocLite("Rgraphviz")
  # or may be needed for eg under ubuntu
  # biocLite("Rgraphviz", configure.args=c("--with-graphviz=/usr"))
  require(Rgraphviz)
  # FURTHER INFO
  # see the Rgraphviz examples
  # example(layoutGraph)
  # require(biocGraph) # for imageMap
  # TODO change names in following
  dsc <- name
  i <- inputs
  o <- outputs
  #   if(!exists('nodes')) {
  if(newgraph==T) {    
    nodes <- new("graphNEL", nodes=c(dsc),
               edgemode="directed")
    # nodes <- addEdge(from=i, to=dsc, graph=nodes, 1)    
  } else {
    if(length(grep(dsc,nodes@nodes)) == 0) nodes <- addNode(node=dsc,object=nodes)
  }  
  if(sum(i %in% nodes@nodes) != length(i)) {
    inew <- i[!i %in% nodes@nodes]
    nodes <- addNode(node=inew,object=nodes)   
  }
  nodes <- addEdge(i, dsc, nodes, 1)
  #}
  if(!is.na(o[1])){
  if(sum(o %in% nodes@nodes) != length(o)) {
    onew <- o[!o %in% nodes@nodes]
    nodes <- addNode(node=onew,object=nodes)   
  }
  nodes <- addEdge(from=dsc, to=o, graph=nodes, 1)  
  }
  if(plot == T){
    try(silent=T,dev.off())
    plot(nodes,attrs=list(node=list(label="foo", fillcolor="grey",shape="ellipse", fixedsize=FALSE), edge=list(color="black")))
  }
  return(nodes)
}

#+end_src
*** man-newnode
#+name:newnode
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:newnode

#+end_src

** oldnode2orgmode
*** test-oldnode2orgmode
#+name:oldnode2orgmode
#+begin_src R :session *R* :tangle tests/test-oldnode2orgmode.r :exports none :eval no
################################################################
# name:oldnode2orgmode
      # project = unlist(strsplit(getwd(),"/"))[length(unlist(strsplit(getwd(),"/")))]
      # title = NA
      # dsc=''
      # ttype=dsc
      # i=NA
      # o=NA
      # notes=''
      # code=NA
      # TASK=NA
      # subsection=T
      # nosectionheading=F
      # dontshow=NA
      # append=T
      # document='sweave'
      # insertgraph=NA
      # doc_code=T
      # end_doc=F
      # dontshow_doc=NA
      # evalCode='FALSE'
      # echoCode='TRUE'
      # inserttable=NA
      # caption=''
      # tablabel='tabx'
      # digits=''
      # align=''
      # tabsideways=F
      # clearpage=F
      # KEYNODE=NA
source("R/oldnode2orgmode.r")
oldnode2orgmode(
dsc = 'Introduction'
,
ttype = 'reports'
,
title = 'HF data prep'
,
dontshow = T
,
notes = '
This is the workflow diagram for the health forecasting project at NCEPH \\cite{Dear2010} which can be viewed
\\href{http://dl.dropbox.com/u/7075452/HF_data/data_transformations.html}{at this link}.

The relationship between daily air quality and daily hospital admissions is being examined:
\\begin{itemize}
\\item Three cities, Brisbane, Melbourne and Sydney
\\item Daily for seven years, 1998 - 2004 (2,557 days)
\\item Twelve disease clusters; both emergency admissions and all admissions; though for most analyses only emergency admissions were considered
\\item By age and sex  (twelve groups)
\\item By spatial subunits of each city: statistical local area (SLA) for Melbourne and Sydney and, for Brisbane, larger zones (clusters of SLAs) designed specifically for this project.
\\end{itemize}
In all there were 0.76 million emergency admissions in Brisbane, 1.66m in Melbourne, and 2.54m in Sydney.
'
,
append = F
,
code = "x <- rnorm(1000,1,2)"
)
  
#+end_src
*** R-oldnode2orgmode
#+name:oldnode2orgmode
#+begin_src R :session *R* :tangle R/oldnode2orgmode.r :exports none :eval no
################################################################
# name:oldnode2orgmode
#maybe args dsc, ttype, title, dontshow, notes, append, code)
oldnode2orgmode <- function(project = unlist(strsplit(getwd(),"/"))[length(unlist(strsplit(getwd(),"/")))],
          title = NA,
          dsc='',ttype=dsc,
          i=NA,
          o=NA,
          notes='',
          code=NA,
          TASK=NA,subsection=T,nosectionheading=F,
          dontshow=NA,append=T, document='sweave',insertgraph=NA,
          doc_code=T, end_doc=F,dontshow_doc=NA,evalCode='FALSE',echoCode='TRUE',inserttable=NA,caption='',
          tablabel='tabx',digits='',align='', tabsideways=F, clearpage=F,
          KEYNODE=NA)
{
if(is.na(ttype)) ttype <- dsc
if(is.na(i[1]))
{
i <- paste(dsc,1,sep = '-')
} else {
i <- paste(i,sep="", collapse="','")
}
if(is.na(o[1]))
{
o <- 'NA'
} else {
o <- paste(o,sep="", collapse="','")
}
if (!is.na(dontshow))
{
tangle <- "no"
} else {
tangle <- "transformations_overview.r"
}
if(append)
{
  newgraph <- "F"
} else {
  newgraph <- "T"
}
node <- paste("
,** ",ttype,"-",dsc,"\n",
notes,"\n
,*** newnode-",dsc,"\n
\\#+name:newnode-",dsc,"
\\#+begin_src R :session *R* :tangle ",tangle," :exports none :eval no
nodes <- newnode(name='",dsc,"',
inputs = c('",i ,"'),
outputs = c('",o,"'),
newgraph = ",newgraph,"
)
\\#+end_src
", sep = "")

#cat(node)
if ( !is.na(code) ) {
node <- paste(node,"\n
,*** src-",dsc,"\n
\\#+name:src-",dsc,"
\\#+begin_src R :session *R* :tangle src/",ttype,"-",dsc,".r :exports none
", code,"
\\#+end_src\n
", sep="")
}
#cat(node)



##################################
fout <- paste(project,'overview.org', sep = "-")
# if the file already exists don't clobber it
#  if(file.exists(fout)) fout <- gsub('overview','overview-nodes', fout)
if(append)
{
sink(fout, append = T)
cat(node)
sink()
} else {
sink(fout)
cat(node)
sink()
}

}

#+end_src
*** man-oldnode2orgmode
#+name:oldnode2orgmode
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:oldnode2orgmode

#+end_src
** estat
*** test-estat
#+name:estat
#+begin_src R :session *R* :tangle no :exports none :eval no
  ################################################################
  # name:estat
      # # we will collect the AIC and BIC to assess the need for a referent *
      # # town interaction
      # if(exists('aic_table')) rm(aic_table) # it is created in the function
      # if(exists('results_out')) rm(results_out) # it is created in the first
      #                                         # loop iteration
      # if(file.exists('reports/modelStratifiedByTown.txt')) file.remove('reports/modelStratifiedByTown.txt')
  estat(
        modGLM = fit
        ,
        modName = "model1.1"
        ,
        createCsv=F
        )
#+end_src
*** R-estat
#+name:estat
#+begin_src R :session *R* :tangle R/estat.r :exports none :eval no
  # TODO
  # make values numeric where needed
  
  ################################################################
  # name:estat
  # a function to get Akaike's and Schwarz's Bayesian information criteria.
    # named after stata function
    estat <- function(modGLM,modName,createCsv=F){
        estats <- c(modName,
                      length(coef(modGLM)),
                      AIC(modGLM),
                      AIC(modGLM, k = log(nrow(analyte))),
                      ((modGLM$null.deviance - modGLM$deviance)/
                        modGLM$null.deviance)*100
          )
          estats <- as.data.frame(t(estats))
          names(estats) <- c('model','param','aic','bic','percentChDev')
          estats$model       <-as.character(estats$model)
          estats$param       <-as.numeric(as.character(estats$param       ))
          estats$aic         <-as.numeric(as.character(estats$aic         ))
          estats$bic         <-as.numeric(as.character(estats$bic         ))
          estats$percentChDev<-as.numeric(as.character(estats$percentChDev))
       if(!exists('aic_table'))
          {
            aic_table <- estats
          } else {
            aic_table <- rbind(aic_table,estats)
          }
       aic_table <- aic_table[order(aic_table$bic),]
       # write to csv
       # if(createCsv==T){
       #   write.table(as.data.frame(t(estats)), 'aic_table.csv', sep=',', row.names=F, append=F, col.names=F)
       # } else {
       #   write.table(as.data.frame(t(estats)), 'aic_table.csv', sep=',', row.names=F, append=T, col.names=F)
       # }
  
       return(aic_table)
    }
  
#+end_src
*** man-estat
#+name:estat
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:estat

#+end_src
