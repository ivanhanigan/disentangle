#+TITLE:disentangle 
#+AUTHOR: Ivan Hanigan
#+email: ivan.hanigan@anu.edu.au
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LATEX: \tableofcontents
-----
* Introduction
* func
** COMMENT newnode moved to index.org
*** R-newnode
#+name:newnode
#+begin_src R :session *R* :tangle R/newnode.r :exports none :eval no
  ################################################################
  # name:newnode
  newnode<-function(name, inputs=NA, outputs=character(0), graph = 'nodes', newgraph=F, notes=F, code=NA, ttype=NA, plot = T){
    # USAGE
    # nodes <- newnode(  # adds to a graph called nodes
    # name = 'aquire the raw data'  # the name of the node being added 
    # inputs = REQUIRED c('external sources','collected by researcher') # single or multiple inputs to it
    # outputs = OPTIONAL c('file server','metadata','cleaning') # single or multiple outputs from it
    # append=F # append to existing graph?  if False remove old graph of that name and start new
    # TODO 
    # nodes <- addEdge(from='analyse using stats package',
    # to='new data in database server',graph=nodes,weights=1)
    # INIT
    # source('http://bioconductor.org/biocLite.R')
    # biocLite("Rgraphviz")
    # or may be needed for eg under ubuntu
    # biocLite("Rgraphviz", configure.args=c("--with-graphviz=/usr"))
    require(Rgraphviz)
    # FURTHER INFO
    # see the Rgraphviz examples
    # example(layoutGraph)
    # require(biocGraph) # for imageMap
    # TODO change names in following
    dsc <- name
    i <- inputs
    o <- outputs
    #   if(!exists('nodes')) {
    if(newgraph==T) {    
      nodes <- new("graphNEL", nodes=c(dsc),
                 edgemode="directed")
      # nodes <- addEdge(from=i, to=dsc, graph=nodes, 1)    
    } else {
      if(length(grep(dsc,nodes@nodes)) == 0) nodes <- addNode(node=dsc,object=nodes)
    }  
    if(sum(i %in% nodes@nodes) != length(i)) {
      inew <- i[!i %in% nodes@nodes]
      nodes <- addNode(node=inew,object=nodes)   
    }
    nodes <- addEdge(i, dsc, nodes, 1)
    #}
    if(length(o) > 0){
    if(sum(o %in% nodes@nodes) != length(o)) {
      onew <- o[!o %in% nodes@nodes]
      nodes <- addNode(node=onew,object=nodes)   
    }
    nodes <- addEdge(from=dsc, to=o, graph=nodes, 1)  
    }
    if(plot == T){
      try(silent=T,dev.off())
      plot(nodes,attrs=list(node=list(label="foo", fillcolor="grey",shape="ellipse", fixedsize=FALSE), edge=list(color="black")))
    }
    return(nodes)
  }
  
#+end_src
*** test-newnode
#+name:newnode
#+begin_src R :session *R* :tangle tests/test-newnode.r :exports none :eval no
  ################################################################
  # name:newnode
  source("R/newnode.r")
  newnode(
    name = "NAME"
    ,
    inputs="INPUT"
    ,
    outputs = "OUTPUT"
    ,
    graph = 'nodes'
    ,
    newgraph=T
    ,
    notes=F
    ,
    code=NA
    ,
    ttype=NA
    ,
    plot = T
    )
  nodes <- newnode("merge", c("d1", "d2", "d3"))
  nodes <- newnode("merge", c("d1", "d2", "d3"), c("EDA"),
                   newgraph =T)
  nodes <- newnode("qc", c("data1", "data2", "data3"), c("d1", "d2", "d3"))
  nodes <- newnode("modelling", "EDA")
  nodes <- newnode("model checking", "modelling", c("data checking", "reporting"))
  #require(disentangle)
  # either edit a spreadsheet with filenames, inputs and outputs 
  filesList <- read.csv("exampleFilesList.csv", stringsAsFactors = F)
  # or 
  filesList <- read.csv(textConnection(
  'FILE,INPUTS,OUTPUTS,DESCRIPTION
  siteIDs,GPS,,latitude and longitude of sites
  weather,BoM,,weather data from BoM
  trapped,siteIDs,,counts of species caught in trap
  biomass,siteIDs,,
  corralations,"weather,trapped,biomass",report1,A study we published
  paper1,report1,"open access repository, data package",
  '), stringsAsFactors = F)
  # start the graph
  i <- 1
  nodes <- newnode(name = filesList[i,1],
                   inputs = strsplit(filesList$INPUTS, ",")[[i]],
                   outputs =
                   strsplit(filesList$OUTPUTS, ",")[[i]]
                   ,
                   newgraph=T)
   
  for(i in 2:nrow(filesList))
  {
    # i <- 2
    if(length(strsplit(filesList$OUTPUTS, ",")[[i]]) == 0)
    {
      nodes <- newnode(name = filesList[i,1],
                       inputs = strsplit(filesList$INPUTS, ",")[[i]]
      )    
    } else {
      nodes <- newnode(name = filesList[i,1],
                       inputs = strsplit(filesList$INPUTS, ",")[[i]],
                       outputs = strsplit(filesList$OUTPUTS, ",")[[i]]
      )
    }
  }
   
  #dev.copy2pdf(file='fileTransformations.pdf')
  #dev.off();
   
#+end_src
*** man-newnode
#+name:newnode
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:newnode

#+end_src

** COMMENT graphNodeFile, deprecated, func won't return all nodes
*** R-graphNodesFile
#+name:graphNodesFile
#+begin_src R :session *R* :tangle no :exports none :eval no
  ################################################################
  # name:graphNodesFile
  graphNodesFile  <- function(filesList)
    {
      # TODO check validity of fileslist input table
      # remove whitespaces?
      i <- 1
      nodes <- newnode(name = filesList[i,1],
                       inputs = strsplit(filesList$INPUTS, ",")[[i]],
                       outputs = strsplit(filesList$OUTPUTS, ",")[[i]],
                       newgraph=T)
   
      for(i in 2:nrow(filesList))
      {
        ## # i <- 2
        nodes <- newnode(name = filesList[i,1],
                         inputs = strsplit(filesList$INPUTS, ",")[[i]],
                         outputs = strsplit(filesList$OUTPUTS, ",")[[i]]
        )
      }
      
    }
  graphNodesFile(filesList)
  # fails with
  ## Error in grep(dsc, nodes@nodes) (from newnode.r#34) : 
  ##   no slot of name "nodes" for this object of class "standardGeneric"
#+end_src
*** test-graphNodesFile
#+name:graphNodesFile
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:graphNodesFile

#+end_src
*** man-graphNodesFile
#+name:graphNodesFile
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:graphNodesFile

#+end_src

** oldnode2orgmode
*** test-oldnode2orgmode
#+name:oldnode2orgmode
#+begin_src R :session *R* :tangle tests/test-oldnode2orgmode.r :exports none :eval no
################################################################
# name:oldnode2orgmode
      # project = unlist(strsplit(getwd(),"/"))[length(unlist(strsplit(getwd(),"/")))]
      # title = NA
      # dsc=''
      # ttype=dsc
      # i=NA
      # o=NA
      # notes=''
      # code=NA
      # TASK=NA
      # subsection=T
      # nosectionheading=F
      # dontshow=NA
      # append=T
      # document='sweave'
      # insertgraph=NA
      # doc_code=T
      # end_doc=F
      # dontshow_doc=NA
      # evalCode='FALSE'
      # echoCode='TRUE'
      # inserttable=NA
      # caption=''
      # tablabel='tabx'
      # digits=''
      # align=''
      # tabsideways=F
      # clearpage=F
      # KEYNODE=NA
source("R/oldnode2orgmode.r")
oldnode2orgmode(
dsc = 'Introduction'
,
ttype = 'reports'
,
title = 'HF data prep'
,
dontshow = T
,
notes = '
This is the workflow diagram for the health forecasting project at NCEPH \\cite{Dear2010} which can be viewed
\\href{http://dl.dropbox.com/u/7075452/HF_data/data_transformations.html}{at this link}.

The relationship between daily air quality and daily hospital admissions is being examined:
\\begin{itemize}
\\item Three cities, Brisbane, Melbourne and Sydney
\\item Daily for seven years, 1998 - 2004 (2,557 days)
\\item Twelve disease clusters; both emergency admissions and all admissions; though for most analyses only emergency admissions were considered
\\item By age and sex  (twelve groups)
\\item By spatial subunits of each city: statistical local area (SLA) for Melbourne and Sydney and, for Brisbane, larger zones (clusters of SLAs) designed specifically for this project.
\\end{itemize}
In all there were 0.76 million emergency admissions in Brisbane, 1.66m in Melbourne, and 2.54m in Sydney.
'
,
append = F
,
code = "x <- rnorm(1000,1,2)"
)
  
#+end_src
*** R-oldnode2orgmode
#+name:oldnode2orgmode
#+begin_src R :session *R* :tangle R/oldnode2orgmode.r :exports none :eval no
################################################################
# name:oldnode2orgmode
#maybe args dsc, ttype, title, dontshow, notes, append, code)
oldnode2orgmode <- function(project = unlist(strsplit(getwd(),"/"))[length(unlist(strsplit(getwd(),"/")))],
          title = NA,
          dsc='',ttype=dsc,
          i=NA,
          o=NA,
          notes='',
          code=NA,
          TASK=NA,subsection=T,nosectionheading=F,
          dontshow=NA,append=T, document='sweave',insertgraph=NA,
          doc_code=T, end_doc=F,dontshow_doc=NA,evalCode='FALSE',echoCode='TRUE',inserttable=NA,caption='',
          tablabel='tabx',digits='',align='', tabsideways=F, clearpage=F,
          KEYNODE=NA)
{
if(is.na(ttype)) ttype <- dsc
if(is.na(i[1]))
{
i <- paste(dsc,1,sep = '-')
} else {
i <- paste(i,sep="", collapse="','")
}
if(is.na(o[1]))
{
o <- 'NA'
} else {
o <- paste(o,sep="", collapse="','")
}
if (!is.na(dontshow))
{
tangle <- "no"
} else {
tangle <- "transformations_overview.r"
}
if(append)
{
  newgraph <- "F"
} else {
  newgraph <- "T"
}
node <- paste("
,** ",ttype,"-",dsc,"\n",
notes,"\n
,*** newnode-",dsc,"\n
\\#+name:newnode-",dsc,"
\\#+begin_src R :session *R* :tangle ",tangle," :exports none :eval no
nodes <- newnode(name='",dsc,"',
inputs = c('",i ,"'),
outputs = c('",o,"'),
newgraph = ",newgraph,"
)
\\#+end_src
", sep = "")

#cat(node)
if ( !is.na(code) ) {
node <- paste(node,"\n
,*** src-",dsc,"\n
\\#+name:src-",dsc,"
\\#+begin_src R :session *R* :tangle src/",ttype,"-",dsc,".r :exports none
", code,"
\\#+end_src\n
", sep="")
}
#cat(node)



##################################
fout <- paste(project,'overview.org', sep = "-")
# if the file already exists don't clobber it
#  if(file.exists(fout)) fout <- gsub('overview','overview-nodes', fout)
if(append)
{
sink(fout, append = T)
cat(node)
sink()
} else {
sink(fout)
cat(node)
sink()
}

}

#+end_src
*** man-oldnode2orgmode
#+name:oldnode2orgmode
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:oldnode2orgmode

#+end_src
** estat
*** test-estat
#+name:estat
#+begin_src R :session *R* :tangle no :exports none :eval no
  ################################################################
  # name:estat
      # # we will collect the AIC and BIC to assess the need for a referent *
      # # town interaction
      # if(exists('aic_table')) rm(aic_table) # it is created in the function
      # if(exists('results_out')) rm(results_out) # it is created in the first
      #                                         # loop iteration
      # if(file.exists('reports/modelStratifiedByTown.txt')) file.remove('reports/modelStratifiedByTown.txt')
  estat(
        modGLM = fit
        ,
        modName = "model1.1"
        ,
        createCsv=F
        )
#+end_src
*** R-estat
#+name:estat
#+begin_src R :session *R* :tangle R/estat.r :exports none :eval no
  # TODO
  # make values numeric where needed
  #                 AIC(modGLM)
  #                 AIC(modGLM, k = log(nrow(analyte)))
  ################################################################
  # name:estat
  # a function to get Akaike's and Schwarz's Bayesian information criteria.
    # named after stata function
    estat <- function(modGLM, modName, form = NA, order_by_aic = TRUE, read_previous_aictable = FALSE){
           if(read_previous_aictable & file.exists("aictable.csv"))
             {
               aictable <- read.csv('aictable.csv')
             }
  
        estats <- c(modName, form,
                    length(coef(modGLM)),
                    (-2 * logLik(modGLM)[1] + 2 * length(modGLM$coeff)),
                    (-2 * logLik(modGLM)[1] + log(nrow(modGLM$data)) * length(modGLM$coeff)),
                    (((modGLM$null.deviance - modGLM$deviance)/
                      modGLM$null.deviance)*100)
          )
          estats <- as.data.frame(t(estats))
          names(estats) <- c('model','formula','param','aic','bic','percentChDev')
          estats$model       <-as.character(estats$model)
          estats$formula       <-as.character(estats$formula)
          estats$param       <-as.numeric(as.character(estats$param       ))
          estats$aic         <-as.numeric(as.character(estats$aic         ))
          estats$bic         <-as.numeric(as.character(estats$bic         ))
          estats$percentChDev<-as.numeric(as.character(estats$percentChDev))
       if(!exists('aictable'))
          {
            aictable <- estats
          } else {
            aictable <- rbind(aictable,estats)
          }
       if(order_by_aic)
         {
          aictable <- aictable[order(aictable$aic),]
         } else {
          aictable <- aictable[order(aictable$bic),]
         }
       return(aictable)
    }
  
#+end_src
*** man-estat
#+name:estat
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:estat

#+end_src
** combos
*** test-combos
#+name:combos
#+begin_src R :session *R* :tangle tests/test-combos.r :exports none :eval no
################################################################
# name:combos
formlas <- combos(yvar = "deaths",
                  xvars = c("x1", "x2", "x3", "x4")
                  )
paste(formlas)
formlas <- combos(yvar = "deaths",
                  xvars = c("x1", "x2", "x3", "x4"),
                  compulsory = c("zone", "ns(time, df = 3)")
                  )
paste(formlas)
#+end_src
*** Crap?
#+name:combos
#+begin_src R :session *R* :tangle tests/test-combos.r :exports none :eval no
  ################################################################
  # name:combos
    vars <- c("cb1.tmax",
              "cb1.ravg",
              "holiday",
              "ws",
              "pmax",
              "nmax",
              "o4max",
              "wday"
              )
    formlas <- NULL
    for(j in length(vars):6)
      {
        combns <- combn(vars, j)
        for(i in 1:ncol(combns))
          {
            terms2include <- combns[,i]
            formla <- reformulate(c(terms2include,
                                    "age",
                                    "zone",
                                    "sin(timevar * 2 * pi) + cos(timevar * 2 * pi) ",
                                    "ns(time, df = 3)",
                                    "offset(log(pop))"),
              response = 'deaths')
            print(formla)
            formlas <- c(formlas,formla)
    
          }
      }
    formlas <- paste(formlas)
    formlas[1:10]
    for(k in 1:length(formlas))
      {
        form <- formlas[k]
        codes <- sprintf("***** model-%s\n#+begin_src R :session *R* :tangle src/modelling-pipeline.r :exports none :eval no\n\nfit <- glm(%s, data = analyte, family = poisson,
               control = glm.control(maxit = 1000))\naictable <- estat(fit, '%s')\n#+end_src\n\n", k, form, form)
        cat(codes)
    
      }
  
  #########################################################################################3
  
  m1 <- matrix(c(2,3,5,6,7,8,9,10,12,13,14), nrow=1, ncol=11)
  m2 <- matrix(c(4,4,4,4,4,4,4,4,4,4,4), nrow=1, ncol=11)
  
  combos<- rbind(m1,m2)
  
  library(plyr)
  adply(combos, 2, function(x) {
     test <- chisq.test(match.knp[, x[1]], match.knp[, x[2]])
  
     out <- data.frame("variable1" = colnames(match.knp)[x[1]]
                       , "Variable2" = colnames(match.knp[x[2]])
                       , "Chi.Square" = round(test$statistic,3)
                       ,  "df"= test$parameter
                       ,  "p.value" = round(test$p.value, 3)
     )
  
  
     return(out)
  })
  
  # expand.grid
  
  
  # Description
  
  # Create a data frame from all combinations of the supplied vectors or 
  # factors. See the description of the return value for precise details of 
  # the way this is done.
  
  # Usage
  
  # expand.grid(..., KEEP.OUT.ATTRS = TRUE, stringsAsFactors = TRUE)
#+end_src
*** R-combos

#+name:R-combos
#+begin_src R :session *R* :tangle R/combos.r :exports none :eval no
################################################################
# name:R-combos
combos  <- function(yvar, xvars, compulsory = NA)
  {
    formlas <- NULL
    for(j in length(xvars):1)
      {
        combns <- combn(xvars, j)
        for(i in 1:ncol(combns))
          {
            terms2include <- combns[,i]
            if(!is.na(compulsory[1]))
              {
                terms2include  <- c(terms2include, compulsory)
              }
            formla <- reformulate(terms2include,                                  
                                  response = yvar
                                  )
            formlas <- c(formlas,formla)     
          }
      }
    return(formlas)
  }
#+end_src

*** man-combos
#+name:combos
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:combos

#+end_src
** create.admin
*** R-create.admin
#+name:create.admin
#+begin_src R :session *R* :tangle R/create.admin.r :exports none :eval no
  ################################################################
  # name:create.admin
  create.admin <- function(rootdir = getwd())
  {
    dir.create(file.path(rootdir, 'admin'))
    dir.create(file.path(rootdir, 'admin','proposal'))
    dir.create(file.path(rootdir, 'admin','budget'))
    dir.create(file.path(rootdir, 'images'))
    dir.create(file.path(rootdir, 'metadata'))
    dir.create(file.path(rootdir, 'references'))
  }
    
#+end_src
*** test-create.admin
#+name:create.admin
#+begin_src R :session *R* :tangle tests/test-create.admin.r :exports none :eval no
  ################################################################
  # name:create.admin
  setwd("~/projects")
  dir()
  create.admin(
    rootdir=getwd()
    )
#+end_src
*** man-create.admin
#+name:create.admin
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:create.admin

#+end_src


