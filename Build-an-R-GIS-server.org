#+TITLE: Build an R GIS server on centos at research cloud
#+AUTHOR: Ivan Hanigan
#+email: ivan.hanigan@anu.edu.au
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
-----
* Introduction
This is an emacs24 orgmode document to enable building an R GIS server
on centos 6.2 amd64 using the Australian National Research Cloud.


I use centos rather than ubuntu because we are forced to use redhat
for production servers at the ANU Research School of Population Health.

It is probably preferable to build this using ubuntu and most of this
should work by replacing `yum install' with `apt-get'.

* Launch an instance
- Log on to the reserach cloud using your Australian University details http://www.nectar.org.au/research-cloud/.
- Under images and snapshots launch the centos 6.2 amd64 image
- give your server a name
- select all http, icmp and ssh under security
- specify a ssh keypair http://support.rc.nectar.org.au/demos/launching_123.html
- launch and note the ip address
- go to the access and security section and edit the http rule
- add a rule to allow access from port 8080 to 9000 with 0.0.0.0/0 (CIDR)
- Note that this allows access to the whole world, we will think about securing the server later
* ssh
If using Windows make sure you have git installed.  Opening a git bash
shell will enable you to connect to your server using ssh. Then the contents of the following orgmode chunks can be evaluated on the remote server.
If your on linux then orgmode can execute these chunks using C-c C-c.
#+name:whoami local
#+begin_src sh :session *shell* :exports none :eval yes :results silent

whoami
#+end_src
In the next chunk, insert the relevant ip address and you may have to answer yes to the question about adding this RSA fingerprint to your list.
#+name:ssh
#+begin_src sh :session *shell* :exports none :eval yes :results silent
cd ~/.ssh
ssh -i digger root@115.146.93.101
# ssh -i keypairname root@your.new.ip.address
# it is prudent to set a hideously long password for root
# passwd root
#+end_src
now try to update the yum package manager
#+name:whoami
#+begin_src sh :sessi
on *shell* :exports none :eval yes :results silent
yum update 
#+end_src
* base packages
# kudos2 http://rlamp.blogspot.com.au/2010/03/getting-started-setting-up-rapache.html
#+name:foundations
#+begin_src sh :session *shell* :exports none :eval yes :results silent
yum install gcc-gfortran  gcc-c++   readline-devel   libpng-devel  libX11-devel libXt-devel   texinfo-tex    tetex-dvips  docbook-utils-pdf   cairo-devel   java-1.6.0-openjdk-devel  libxml2-devel   make
#+end_src
* describe the system
note the size and partitions
#+name:partitions
#+begin_src sh :session *shell* :exports none :eval yes :results silent
df -h
#+end_src
* add users
#+name:add users
#+begin_src sh :session *shell* :exports none :eval yes :results silent
adduser newuser1
passwd newuser1
adduser newuser2
passwd newuser2
#+end_src
* R
#+name:R
#+begin_src sh :session *shell* :exports none :eval yes :results silent
rpm -Uvh http://mirror.as24220.net/pub/epel/6/i386/epel-release-6-7.noarch.rpm
yum install R R-devel
#+end_src
* Rstudio
#+name:install rstudio
#+begin_src sh :session *shell* :exports none :eval yes :results silent
wget http://download2.rstudio.org/rstudio-server-0.96.304-x86_64.rpm
yum install rstudio-server-0.96.304-x86_64.rpm
rstudio-server verify-installation
#+end_src
firewall access
NB emacs does this badly! use a terminal?
#+name:firewall
#+begin_src sh :session *shell* :exports none :eval no :results silent
# kudos2 http://slinsmeier.wordpress.com/2012/05/19/creating-a-lab-environment-with-rstudio/
# It is necessary to open the firewall port to allow the browser
# access to RStudio: edit the 
vi /etc/sysconfig/iptables 
# file and add the line
# -A INPUT -m state --state NEW -m tcp -p tcp --dport 8787 -j ACCEPT
# directly after the opening of the ssh port 22 (or copy that line and change the port 22 to 8787).
# use INS to start editing, ESC to stop and :x to save
service iptables restart
# need to reboot?
#+end_src
might take a little while before your browser can connect, allow a couple of minutes
** TODO figure out how to run with proxy
http://rstudio.org/docs/server/running_with_proxy is only for ubuntu?
** test 
log on to Rstudio at your.new.ip.address and copy the following into a new RNW sweave file (might need to modify the sweave options in tools, something to do with tex2dvi?)
#+name:learnR
#+begin_src R :session *R* :tangle learnR.Rnw :exports none :eval no
\documentclass[a4paper]{article}
\usepackage{fancyhdr} %For headers and footers
\pagestyle{fancy} %For headers and footers
\usepackage{lastpage} %For getting page x of y
\usepackage{float} %Allows the figures to be positioned and formatted nicely
\floatstyle{boxed} %using this
\restylefloat{figure} %and this command
\usepackage{url} %Formatting of yrls
\usepackage{verbatim}
\usepackage{cite} 
\usepackage{hyperref} 
%Define all the headers and footers
\lhead{}
\chead{NCEPH Working Paper}
\rhead{}
\lfoot{Ivan C Hanigan}
\cfoot{\today}
\rfoot{\thepage\ of \pageref{LastPage}}
\usepackage{Sweave}
\begin{document}
\SweaveOpts{concordance=TRUE}
%\SweaveOpts{concordance=TRUE}
%\input{learnR-concordance}
\title{Example Sweave Document}
\author{Ivan C. Hanigan$^{1}$}
\date {\today}
\maketitle
\begin{itemize}
\item [$^1$] National Centre for Epidemiology and Population Health, \\Australian National University.
\end{itemize}

\setcounter{page}{1}
\pagenumbering{roman}
\tableofcontents 
\pagenumbering{arabic}
\setcounter{page}{1}

\section{Introduction}
This is an introduction to some resources that are useful for learning R.  
\section{The R code that produced this report}
It is important to appreciate that R is free and open source software.  This means that any code you write can be viewed and modified by others.  In some cases we need to protect our Intellectual Property and the following statement is an attempt to ascribe copyright to our work, even though it remains open source.

``I support the philosophy of Reproducible Research \cite{Peng2011}, and where possible I provide data and code in the statistical software R that will allow analyses to be reproduced.  This document is prepared automatically from the associated Sweave (RNW) file.  If you do not have access to the RNW file please contact me.''
<<eval=FALSE,echo=FALSE,keep.source=TRUE>>=
cat('
 #######################################################################
 ## The R code is free software; please cite this paper as the source.  
 ## Copyright 2012, Ivan C Hanigan <ivan.hanigan@gmail.com> 
 ## This program is free software; you can redistribute it and/or modify
 ## it under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 2 of the License, or
 ## (at your option) any later version.
 ## 
 ## This program is distributed in the hope that it will be useful,
 ## but WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ## Free Software
 ## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA
 #######################################################################
')
@ 


\subsection{func}
I'll use the following packages:
<<eval=TRUE,echo=TRUE,keep.source=TRUE>>=  
if(!require(xtable)) install.packages('xtable', repos = 'http://cran.csiro.au')
require(xtable)
#require(ggplot2)
#require(ProjectTemplate)
@
<<eval=FALSE,echo=FALSE,keep.source=TRUE>>=  
create.project('analysis', minimal = TRUE)
dir.create('analysis/reports')
# the plan
@
\subsection{Some Code}
<<eval=TRUE,echo=TRUE,keep.source=TRUE>>=
x<-rnorm(100,10,5)
y<-rnorm(100,20,15)
fit <- lm(y~x)
summary(fit)
@
Using the xtable package allows results to be displyed in tables and has built in support for some R objects, so summrising the linear fit above in Table ~\ref{ATable}.
<<eval=TRUE,echo=FALSE,results=tex>>=
require(xtable)
xtable(fit, caption="Example Table",digits=4,table.placement="H",label="ATable")
@
\subsection{A Plot}
 
Plots intergrate easily, using the \LaTeX float package as can be seen in figure ~\ref{aPlot.png}.  However I like to make them as pngs and then include.

<<eval=TRUE,echo=FALSE,keep.source=TRUE>>=  
png('aPlot.png', res=200,width = 600, height = 600)
plot(x,y,main="Example Plot",xlab="X Variable",ylab="Y Variable")
abline(fit,col="Red")
dev.off()
@
\begin{figure}[!h]
\centering
\includegraphics[width=\textwidth]{aPlot.png}
\caption{aPlot.png}
\label{fig:aPlot.png}
\end{figure}
\clearpage
\section{Remembering the points}
This blog post \url{http://www.win-vector.com/blog/2012/04/how-to-remember-point-shape-codes-in-r/} says:

I suspect I am not unique in not being able to remember how to control the point shapes in R. Part of this is a documentation problem: no package ever seems to write the shapes down. All packages just use the usual set that derives from S-Plus and was carried through base-graphics, to grid, lattice and ggplot2. The quickest way out of this is to know how to generate an example plot of the shapes quickly. We show how to do this in ggplot2. This is trivial- but you get tired of not having it immediately available.


I like it but it is not as complate as the plot shown in Figure \ref{fig:pchopts.png} from the `R for Beginners' document by Emmanuel Paradis \cite{Paradis2002}.  I also find I often get disoriented using ggplot2.

<<eval=TRUE, echo=FALSE>>=
# it had to be fixed
# sum <- ggplot()
# for(i in 1:25) {
#    sum <- sum +
#       geom_point(data=data.frame(x=c(i)),aes(x=x,y=x),shape=i)
# }
# sum
# but this still doesn't work properly
# ggplot(data=data.frame(x=as.factor(1:16))) + geom_point(aes(x=x,y=x)) +
#     facet_wrap(~x,scales='free')
# I like base graphics anyway
png('pchopts.png')
par(mfrow=c(3,10), mar=c(0,0,2,0))
for(i in c(1:25)){
 plot(1,1,pch=i, axes=F, cex = 3, col = 'blue', bg = 'yellow')
 title(i)
 }
for(i in c("*", "?", ".", "X", "a")){
 plot(1,1,pch=i, axes=F, cex = 3, col = 'blue', bg = 'yellow')
 title(i)
 }
dev.off()
@
\begin{figure}[!h]
\centering
\includegraphics[width=\textwidth]{pchopts.png}
\caption{pchopts.png}
\label{fig:pchopts.png}
\end{figure}


\section{Conclusion}
In conclusion, sweave rocks.


\begin{thebibliography}{1}
\bibitem{Paradis2002}
Emmanuel Paradis.
\newblock {R for Beginners}.
\newblock 2002.

\bibitem{Peng2011}
Roger~D Peng.
\newblock {Reproducible research in computational science.}
\newblock {\em Science (New York, N.Y.)}, 334(6060):1226--7, December 2011.

\end{thebibliography}

\section{System State}
<<eval=TRUE,echo=TRUE,keep.source=TRUE>>=
sessionInfo()
@




\end{document}

#+end_src

* git
#+name:git
#+begin_src sh :session *shell* :exports none :eval yes :results silent
yum install git
reboot
#+end_src
** ssh for github
- in rstudio
- tools / options / version control
- create rsa key, ok, ok
- view pub key, copy, paste to your github account
* gdal
#+name:gdal
#+begin_src sh :session *shell* :exports none :eval yes :results silent
sudo rpm -Uvh http://elgis.argeo.org/repos/6/elgis/x86_64/elgis-release-6-6_0.noarch.rpm
yum list gdal*
yum install gdal-devel.x86_64
yum install proj-devel.x86_64
#+end_src
#+name:geos
#+begin_src sh :session *shell* :exports none :eval yes :results silent
yum install geos-devel.x86_64
#+end_src
** need this for proper transforms of agd66 to gda94
kudos2 Joe Guillaume and Francis Markham
#+name:proper transforms
#+begin_src sh :session *shell* :exports none :eval yes :results silent
cd /usr/share/proj
wget  http://www.icsm.gov.au/icsm/gda/gdatm/national66.zip
yum install unzip
unzip national66.zip
mv "A66 National (13.09.01).gsb" aust_national_agd66_13.09.01.gsb
#+end_src
* rgraphviz
# kudos2 http://vladinformatics.blogspot.com.au/2012/03/my-experience-with-installing-rgraphviz.html 
#+name:rgraphviz
#+begin_src sh :session *shell* :exports none :eval yes :results silent
wget http://www.graphviz.org/pub/graphviz/stable/redhat/el6/x86_64/os/graphviz-2.28.0-1.el6.x86_64.rpm
yum install graphviz-2.28.0-1.el6.x86_64.rpm
wget http://www.graphviz.org/pub/graphviz/stable/redhat/el6/x86_64/os/graphviz-devel-2.28.0-1.el6.x86_64.rpm
yum install graphviz-devel-2.28.0-1.el6.x86_64.rpm
#+end_src
** test
try newnode_test from
git@github.com:ivanhanigan/disentangle.git
