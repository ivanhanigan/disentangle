#+TITLE: Build an R GIS server on centos at research cloud
#+AUTHOR: Ivan Hanigan
#+email: ivan.hanigan@anu.edu.au
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
-----
#+name:header
#+begin_src R :session *R* :tangle no :exports none :eval no
paste(getwd(),'\n',Sys.Date())

#+end_src

#+RESULTS: header
| i:/tools/disentangle |
|           2012-07-04 |

* Introduction
This is an emacs24 orgmode document to enable building an R GIS server
on centos 6.2 amd64 using the Australian National Research Cloud.


I use centos rather than ubuntu because we are forced to use redhat
for production servers at the ANU Research School of Population Health.

It is probably preferable to build this using ubuntu and most of this
should work by replacing `yum install' with `apt-get'.

* Launch an instance
- Log on to the research cloud using your Australian University details http://www.nectar.org.au/research-cloud/.
- Under images and snapshots launch the centos 6.2 amd64 image
- give your server a name
- select all http, icmp and ssh under security
- specify a ssh keypair http://support.rc.nectar.org.au/demos/launching_123.html
- launch and note the ip address
- go to the access and security section and edit the http rule
- add a rule to allow access from port 8080 to 9000 with 0.0.0.0/0 (CIDR)
- Note that this allows access to the whole world, we will think about securing the server later
* ssh
If using Windows make sure you have git installed.  Opening a git bash
shell will enable you to connect to your server using ssh. Then the contents of the following orgmode chunks can be evaluated on the remote server.
If your on linux then orgmode can execute these chunks using C-c C-c.
#+name:whoami local
#+begin_src sh :session *shell* :exports none :eval yes :results silent

whoami
#+end_src
In the next chunk, insert the relevant ip address and you may have to answer yes to the question about adding this RSA fingerprint to your list.
#+name:ssh
#+begin_src sh :session *shell* :exports none :eval yes :results silent
  cd ~/.ssh
  ssh -i keypairname root@your.new.ip.address
  # it is prudent to set a hideously long password for root
  # passwd root
#+end_src
TODO why can i get in without using -i keypairname?
** changes to make
/etc/ssh/sshd_config
under authentication remark out 
#RSAAuthentication yes
#PubkeyAuthentication yes
and then scroll down to 
# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no
PasswordAuthentication yes
# change to no

Example of one of Daves.

Port 13456
#Protocol 2,1
Protocol 2
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

# Authentication:

#LoginGraceTime 2m
PermitRootLogin yes
#StrictModes yes
#MaxAuthTries 6

#RSAAuthentication yes
#PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#RhostsRSAAuthentication no
# similar for protocol version 2
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# RhostsRSAAuthentication and HostbasedAuthentication
IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no
PasswordAuthentication no

* yum updates
now try to update the yum package manager
#+name:yumupdate
#+begin_src sh :session *shell* :exports none :eval yes :results silent
yum update 
#+end_src
* security measures
** restrict ssh to a specific ip address
# on ubuntu see https://help.ubuntu.com/community/IptablesHowTo#Solution_.233_iptables-persistent
open the firewall port to allow access to port 22 only from specified ip address
# vi /etc/sysconfig/iptables 
# and modify the line
# -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
# to 
# -A INPUT -s your.desk.ip.address -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
# might want one for port 5432 as well if using postgres
# service iptables restart
TODO I'd like to restrict ssh access to the ncephgis VPN group, and add the restriction to use keypair's.  

-A INPUT -s vpn.ip.range.0/255.255.255.0 -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
# NB only works for servers on your VPN network

service iptables restart
# to restrict root log in (but out policy can permit log in if ssh is
# only open to the vpn range?  leave the below as yes yes yes?
vi /etc/ssh/sshd_config

# Authentication:

#LoginGraceTime 2m
PermitRootLogin yes
#StrictModes yes
#MaxAuthTries 6

# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no

* setting up the Server
** a domain name?
At the blog http://helmingstay.blogspot.com.au/2012/02/adduser-myusername-adduser-myusername.html
there is a well described process to set up an R server on the amazon EC2 cloud.
They had registered their own domain and added it to the amazon system. Then used a script file made specifically to work with AWS -- "it's very self-explanatory".  
## see that blog for the example.
## change hostname to match afraid.org entry
sudo vi /etc/hostname
sudo /etc/init.d/hostname restart
** sudo rights
add sudoers
kudos2 http://helmingstay.blogspot.com.au/2012/02/adduser-myusername-adduser-myusername.html
#+name:add sudoer
#+begin_src sh :session *shell* :exports none :eval yes :results silent
adduser super_user
passwd super_user
#+end_src
#+name:sudoer
#+begin_src sh :session *shell* :exports none :eval no :results silent
# adduser super_user sudoers
## add correct key to ~myusername/.ssh/authorized_keys
# NB this didnt work , might be ubuntu only?
# ASKED DAVE FOR ADVICE
yum list sudo*
# says installed packages sudo.x86_64
# Create the local user accounts e.g.
useradd super_user
# useradd super_user2
# and them to a particular group e.g. nceph_admins
groupadd nceph_admins
usermod -G nceph_admins super_user
# usermod -G nceph_admins super_user2

# don't forget assign passwords

passwd super_user
#passwd super_user2

#then enter

sudoedit /etc/sudoers

root ALL=(ALL) ALL
%nceph_admins ALL=ALL

# or 
# To avoid creating and adding users to a group
#root ALL=(ALL) ALL
#super_user ALL=ALL
#super_user2 ALL=ALL

#+end_src

** disable root login
# if you can set this up then the blog post above recommends restricting root login
# vi /etc/ssh/sshd_config 
## disable root login
# /etc/init.d/ssh restart
## now log in as myusername via another terminal to make sure it works, and then log out as root
# Questions to Dave.
# Q1 Should I disable root log in?
# Yes, because of 1) Emacs over X Windows and SSH, 2)R console access
# via SSH etc.  On most of my systems only my ip address have 22 access though the firewall so in those circumstances that is fine. 

# Q2 from your previous build I saw you modified your user with vi /etc/passwd # and change david:x:500:500::/home/david:/bin/bash to ::/home/david:/sbin/nologin #is this necessary for all users?

# Depends on yourself.  Guessing that RStudio will be visible to the outside world without the need to VPN in?  If so and a external user who only needs to access to RStudio you would then change their login in /etc/passwd to provided example.  Users who will be accessing the server with EMacs, plain R Console vi SSH etc, you would not change.



** SSL/HTTPS and running a proxy Server
see the section below after the Rstudio server is set up.  
Perhaps an alternative? http://www.investuotojas.eu/2012/08/10/rstudio-server-through-ssh/
** selinux
after setting up the Rstudio server and the ssl/https 
# selinux config
vi /etc/selinux/config


# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing - SELinux security policy is enforced.
#     permissive - SELinux prints warnings instead of enforcing.
#     disabled - No SELinux policy is loaded.
SELINUX=enforcing

# Change SELINUX=enforcing to disabled and you must reboot the server after applying the change.
# also the following 
# chkconfig httpd on
# so  when log back in must restart httpd
*** other things
# check what's on
chkconfig --list | grep on
acpid           0:off   1:off   2:on    3:on    4:on    5:on    6:off
auditd          0:off   1:off   2:on    3:on    4:on    5:on    6:off
cgconfig        0:off   1:off   2:off   3:off   4:off   5:off   6:off
cups            0:off   1:off   2:on    3:on    4:on    5:on    6:off
fcoe            0:off   1:off   2:on    3:on    4:on    5:on    6:off
httpd           0:off   1:off   2:on    3:on    4:on    5:on    6:off
ip6tables       0:off   1:off   2:on    3:on    4:on    5:on    6:off
iptables        0:off   1:off   2:on    3:on    4:on    5:on    6:off
iscsi           0:off   1:off   2:off   3:on    4:on    5:on    6:off
iscsid          0:off   1:off   2:off   3:on    4:on    5:on    6:off
lldpad          0:off   1:off   2:on    3:on    4:on    5:on    6:off
lvm2-monitor    0:off   1:on    2:on    3:on    4:on    5:on    6:off
messagebus      0:off   1:off   2:on    3:on    4:on    5:on    6:off
netconsole      0:off   1:off   2:off   3:off   4:off   5:off   6:off
netfs           0:off   1:off   2:off   3:on    4:on    5:on    6:off
network         0:off   1:off   2:on    3:on    4:on    5:on    6:off
nfslock         0:off   1:off   2:off   3:on    4:on    5:on    6:off
portreserve     0:off   1:off   2:on    3:on    4:on    5:on    6:off
restorecond     0:off   1:off   2:off   3:off   4:off   5:off   6:off
rpcbind         0:off   1:off   2:on    3:on    4:on    5:on    6:off
rpcgssd         0:off   1:off   2:off   3:on    4:on    5:on    6:off
rpcidmapd       0:off   1:off   2:off   3:on    4:on    5:on    6:off
rstudio-server  0:off   1:off   2:on    3:on    4:on    5:on    6:off
rsyslog         0:off   1:off   2:on    3:on    4:on    5:on    6:off
sshd            0:off   1:off   2:on    3:on    4:on    5:on    6:off
udev-post       0:off   1:on    2:on    3:on    4:on    5:on    6:off
# then 
chkconfig `servicename' on
# or
chkconfig `servicename' off

* base packages
# kudos2 http://rlamp.blogspot.com.au/2010/03/getting-started-setting-up-rapache.html
#+name:foundations
#+begin_src sh :session *shell* :exports none :eval yes :results silent
yum install gcc-gfortran  gcc-c++   readline-devel   libpng-devel  libX11-devel libXt-devel   texinfo-tex    tetex-dvips  docbook-utils-pdf   cairo-devel   java-1.6.0-openjdk-devel  libxml2-devel   make
#+end_src
* describe the system
note the size and partitions
#+name:partitions
#+begin_src sh :session *shell* :exports none :eval yes :results silent
df -h
#+end_src
* add users
Primarily you will want to do this from your GIS desktop, using the 'secure passwords using R' section
#+name:add users
#+begin_src sh :session *shell* :exports none :eval yes :results silent
adduser newuser1
passwd newuser1
adduser newuser2
passwd newuser2
#+end_src



* R
#+name:R
#+begin_src sh :session *shell* :exports none :eval yes :results silent
rpm -Uvh http://mirror.as24220.net/pub/epel/6/i386/epel-release-6-7.noarch.rpm
yum install R R-devel
#+end_src
# NB on redhat 6.3 build we had to register to the optional channel the following command needs to be issued.
# rhn-channel --add --channel=rhel-x86_64-server-optional-6
# then yum install texinfo-tex.x86_64
** package management
Kudos2
http://zvfak.blogspot.com.au/2012/06/updating-r-but-keeping-your-installed.html
The problem is that when you update R you usually need to re-install your libraries or change .libPaths() to point to a location that has your previous libraries.

The solution below will work for unix-like operating systems including Mac OS X.

First, we need a location to install all our packages from now on. This can be any directory, and location of this directory should be indicated in ~/.Renviron file. Let's create that directory now:

mkdir ~/Rlibs

We created Rlibs directory in our home directory. Now, create the .Renviron file in your home directory and enter the following line and save the .Renviron file:

 R_LIBS=~/Rlibs

We can now start R and install any library. The libraries will be installed to ~/Rlibs, and when we update R, R will still look for libraries in ~/Rlibs directory so we don't need to re-install the libraries. However, we will need to update the libraries in ~/Rlibs directory to their most recent versions. All we need to do is to run update.packages() in R console, and the libraries will be updated.
* Rstudio
#+name:install rstudio
#+begin_src sh :session *shell* :exports none :eval yes :results silent
wget http://download2.rstudio.org/rstudio-server-0.96.304-x86_64.rpm
yum install rstudio-server-0.96.304-x86_64.rpm
rstudio-server verify-installation
#+end_src
firewall access
NB emacs does this badly! use a terminal?
#+name:firewall
#+begin_src sh :session *shell* :exports none :eval no :results silent
# kudos2 http://slinsmeier.wordpress.com/2012/05/19/creating-a-lab-environment-with-rstudio/
# It is necessary to open the firewall port to allow the browser
# access to RStudio: edit the 
vi /etc/sysconfig/iptables 
# file and add the line
# -A INPUT -m state --state NEW -m tcp -p tcp --dport 8787 -j ACCEPT
# directly after the opening of the ssh port 22 (or copy that line and change the port 22 to 8787).
# use INS to start editing, ESC to stop and :x to save
service iptables restart
# need to reboot?
#+end_src
might take a little while before your browser can connect, allow a couple of minutes
* SSL/HHTPS and running a proxy server 
# http://rstudio.org/docs/server/running_with_proxy is only for ubuntu?
#+name:install apache
#+begin_src sh :session *shell* :exports none :eval yes :results silent
sudo yum install httpd.x86_64
#+end_src
# run the following interactively
sudo openssl genrsa -out /etc/pki/tls/private/rstudio.ivan.com.key 1024
# the next is one line
sudo openssl req -new -key /etc/pki/tls/private/rstudio.ivan.com.key -x509 -out /etc/pki/tls/certs/rstudio.ivan.com.crt -days 365
#+name:mod_ssl
#+begin_src sh :session *shell* :exports none :eval yes :results silent
sudo yum install mod_ssl.x86_64 
#+end_src
# NB couldn't follow dave's install here as can't find distcache in lib
#vi /etc/httpd/conf.d/ssl.conf 
# vi +/SSLCertificateFile /etc/httpd/conf.d/ssl.conf
# Change the paths to match where the Key file is stored. 
SSLCertificateFile /etc/pki/tls/certs/rstudio.ivan.com.crt
# Then set the correct path for the Certificate Key File a few lines below. 
SSLCertificateKeyFile /etc/pki/tls/private/rstudio.ivan.com.key
#+name:makedir
#+begin_src sh :session *shell* :exports none :eval yes :results silent
sudo mkdir /etc/httpd/sites
#+end_src
#sudo vi /etc/httpd/conf/httpd.conf 
# and add 
Include /etc/httpd/sites/
# as the last line.
# NB did the next in terminal
# vi /etc/httpd/sites/rstudio-ivan.com
# in testing below changed this to rstudio.ivan.com
# insert
<VirtualHost *:80>

  ServerName rstudio.ivan.com
  RedirectMatch ^(.*)$ https://rstudio.ivan.com$1

</VirtualHost>
# goodo
# sudo vi /etc/httpd/conf.d/ssl.conf
# add

  <Proxy *>
    Allow from localhost
  </Proxy>

  ProxyPass        / http://localhost:8787/
  ProxyPassReverse / http://localhost:8787/


# before </VirtualHost>
#+name:restart
#+begin_src sh :session *shell* :exports none :eval yes :results silent
sudo /etc/init.d/httpd restart
#+end_src
sudo chkconfig httpd on
# sudo vi /etc/sysconfig/iptables 
# remove the previoslyu added 443 line
# to the previously added line for 8787 modify to 
# -A INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT
#+name:restart
#+begin_src sh :session *shell* :exports none :eval yes :results silent
sudo service iptables restart
#+end_src
# sudo vi /etc/rstudio/rserver.conf
 www-address=127.0.0.1
#+name:rstudio restart
#+begin_src sh :session *shell* :exports none :eval yes :results silent
sudo /etc/init.d/rstudio-server restart
#+end_src
# now going to https://your.new.ip.address/
# should ask you to add an exception
# can also try sudo reboot?
** test 
log on to Rstudio at your.new.ip.address and copy the following into a new RNW sweave file (might need to modify the sweave options in tools, something to do with tex2dvi?)
#+name:learnR
#+begin_src R :session *R* :tangle learnR.Rnw :exports none :eval no
\documentclass[a4paper]{article}
\usepackage{fancyhdr} %For headers and footers
\pagestyle{fancy} %For headers and footers
\usepackage{lastpage} %For getting page x of y
\usepackage{float} %Allows the figures to be positioned and formatted nicely
\floatstyle{boxed} %using this
\restylefloat{figure} %and this command
\usepackage{url} %Formatting of yrls
\usepackage{verbatim}
\usepackage{cite} 
\usepackage{hyperref} 
%Define all the headers and footers
\lhead{}
\chead{NCEPH Working Paper}
\rhead{}
\lfoot{Ivan C Hanigan}
\cfoot{\today}
\rfoot{\thepage\ of \pageref{LastPage}}
\usepackage{Sweave}
\begin{document}
\SweaveOpts{concordance=TRUE}
%\SweaveOpts{concordance=TRUE}
%\input{learnR-concordance}
\title{Example Sweave Document}
\author{Ivan C. Hanigan$^{1}$}
\date {\today}
\maketitle
\begin{itemize}
\item [$^1$] National Centre for Epidemiology and Population Health, \\Australian National University.
\end{itemize}

\setcounter{page}{1}
\pagenumbering{roman}
\tableofcontents 
\pagenumbering{arabic}
\setcounter{page}{1}

\section{Introduction}
This is an introduction to some resources that are useful for learning R.  
\section{The R code that produced this report}
It is important to appreciate that R is free and open source software.  This means that any code you write can be viewed and modified by others.  In some cases we need to protect our Intellectual Property and the following statement is an attempt to ascribe copyright to our work, even though it remains open source.

``I support the philosophy of Reproducible Research \cite{Peng2011}, and where possible I provide data and code in the statistical software R that will allow analyses to be reproduced.  This document is prepared automatically from the associated Sweave (RNW) file.  If you do not have access to the RNW file please contact me.''
<<eval=FALSE,echo=FALSE,keep.source=TRUE>>=
cat('
 #######################################################################
 ## The R code is free software; please cite this paper as the source.  
 ## Copyright 2012, Ivan C Hanigan <ivan.hanigan@gmail.com> 
 ## This program is free software; you can redistribute it and/or modify
 ## it under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 2 of the License, or
 ## (at your option) any later version.
 ## 
 ## This program is distributed in the hope that it will be useful,
 ## but WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ## Free Software
 ## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA
 #######################################################################
')
@ 


\subsection{func}
I'll use the following packages:
<<eval=TRUE,echo=TRUE,keep.source=TRUE>>=  
if(!require(xtable)) install.packages('xtable', repos = 'http://cran.csiro.au')
require(xtable)
#require(ggplot2)
#require(ProjectTemplate)
@
<<eval=FALSE,echo=FALSE,keep.source=TRUE>>=  
create.project('analysis', minimal = TRUE)
dir.create('analysis/reports')
# the plan
@
\subsection{Some Code}
<<eval=TRUE,echo=TRUE,keep.source=TRUE>>=
x<-rnorm(100,10,5)
y<-rnorm(100,20,15)
fit <- lm(y~x)
summary(fit)
@
Using the xtable package allows results to be displyed in tables and has built in support for some R objects, so summrising the linear fit above in Table ~\ref{ATable}.
<<eval=TRUE,echo=FALSE,results=tex>>=
require(xtable)
xtable(fit, caption="Example Table",digits=4,table.placement="H",label="ATable")
@
\subsection{A Plot}
 
Plots intergrate easily, using the \LaTeX float package as can be seen in figure ~\ref{aPlot.png}.  However I like to make them as pngs and then include.

<<eval=TRUE,echo=FALSE,keep.source=TRUE>>=  
png('aPlot.png', res=200,width = 600, height = 600)
plot(x,y,main="Example Plot",xlab="X Variable",ylab="Y Variable")
abline(fit,col="Red")
dev.off()
@
\begin{figure}[!h]
\centering
\includegraphics[width=\textwidth]{aPlot.png}
\caption{aPlot.png}
\label{fig:aPlot.png}
\end{figure}
\clearpage
\section{Remembering the points}
This blog post \url{http://www.win-vector.com/blog/2012/04/how-to-remember-point-shape-codes-in-r/} says:

I suspect I am not unique in not being able to remember how to control the point shapes in R. Part of this is a documentation problem: no package ever seems to write the shapes down. All packages just use the usual set that derives from S-Plus and was carried through base-graphics, to grid, lattice and ggplot2. The quickest way out of this is to know how to generate an example plot of the shapes quickly. We show how to do this in ggplot2. This is trivial- but you get tired of not having it immediately available.


I like it but it is not as complate as the plot shown in Figure \ref{fig:pchopts.png} from the `R for Beginners' document by Emmanuel Paradis \cite{Paradis2002}.  I also find I often get disoriented using ggplot2.

<<eval=TRUE, echo=FALSE>>=
# it had to be fixed
# sum <- ggplot()
# for(i in 1:25) {
#    sum <- sum +
#       geom_point(data=data.frame(x=c(i)),aes(x=x,y=x),shape=i)
# }
# sum
# but this still doesn't work properly
# ggplot(data=data.frame(x=as.factor(1:16))) + geom_point(aes(x=x,y=x)) +
#     facet_wrap(~x,scales='free')
# I like base graphics anyway
png('pchopts.png')
par(mfrow=c(3,10), mar=c(0,0,2,0))
for(i in c(1:25)){
 plot(1,1,pch=i, axes=F, cex = 3, col = 'blue', bg = 'yellow')
 title(i)
 }
for(i in c("*", "?", ".", "X", "a")){
 plot(1,1,pch=i, axes=F, cex = 3, col = 'blue', bg = 'yellow')
 title(i)
 }
dev.off()
@
\begin{figure}[!h]
\centering
\includegraphics[width=\textwidth]{pchopts.png}
\caption{pchopts.png}
\label{fig:pchopts.png}
\end{figure}


\section{Conclusion}
In conclusion, sweave rocks.


\begin{thebibliography}{1}
\bibitem{Paradis2002}
Emmanuel Paradis.
\newblock {R for Beginners}.
\newblock 2002.

\bibitem{Peng2011}
Roger~D Peng.
\newblock {Reproducible research in computational science.}
\newblock {\em Science (New York, N.Y.)}, 334(6060):1226--7, December 2011.

\end{thebibliography}

\section{System State}
<<eval=TRUE,echo=TRUE,keep.source=TRUE>>=
sessionInfo()
@




\end{document}

#+end_src

* git
#+name:git
#+begin_src sh :session *shell* :exports none :eval yes :results silent
yum install git
reboot
#+end_src
** ssh for github
- in rstudio
- tools / options / version control
- create rsa key, ok, ok
- view pub key, copy, paste to your github account
* gdal
#+name:gdal
#+begin_src sh :session *shell* :exports none :eval yes :results silent
sudo rpm -Uvh http://elgis.argeo.org/repos/6/elgis/x86_64/elgis-release-6-6_0.noarch.rpm
#+end_src
#+begin_src sh :session *shell* :exports none :eval yes :results silent
yum list gdal*
yum install gdal-devel.x86_64
yum install proj-devel.x86_64
#+end_src
#+name:geos
#+begin_src sh :session *shell* :exports none :eval yes :results silent
yum install geos-devel.x86_64
#+end_src
** or under ubuntu
#+name:gdal
#+begin_src sh :exports none
  sudo apt-get update
  sudo apt-get install libgdal1-dev
  sudo apt-get install libproj-dev
  # OR
  # You need the development packages of GDAL and proj4. Probably easier to
  #install from repository than from source. Try:
  
  # sudo apt-get install libgdal1-dev libproj-dev
  # sudo R
  # install.packages("rgdal")
  
#+end_src

** need this for proper transforms of agd66 to gda94
kudos2 Joe Guillaume and Francis Markham
#+name:proper transforms
#+begin_src sh :session *shell* :exports none :eval yes :results silent
cd /usr/share/proj
wget  http://www.icsm.gov.au/icsm/gda/gdatm/national66.zip
yum install unzip
unzip national66.zip
mv "A66 National (13.09.01).gsb" aust_national_agd66_13.09.01.gsb
#+end_src
* rgraphviz

#+name:gviz
#+begin_src sh :session *shell* :exports none :eval yes :results silent
wget http://www.graphviz.org/graphviz-rhel.repo
mv graphviz-rhel.repo /etc/yum.repos.d/ 
yum list available 'graphviz*'
yum install 'graphviz*'
#+end_src
# as root
R
source('http://bioconductor.org/biocLite.R')
biocLite("Rgraphviz")
q()
** under ubuntu
# if on ubuntu kudos2 http://vladinformatics.blogspot.com.au/2012/03/my-experience-with-installing-rgraphviz.html 
make sure libgraphviz-dev is installed. It is needed for some header files (e.g. gvc.h)
sudo apt-get install libgraphviz-dev
then
sudo R
source('http://bioconductor.org/biocLite.R')
biocLite("Rgraphviz", configure.args=c("--with-graphviz=/usr"))
the reason is that at least on my comp the dot program was in /usr/bin, but not in /usr/local/bin as Rgraphviz defaults 

** test
try newnode_test from
git@github.com:ivanhanigan/disentangle.git
* PostGIS
The following is a work in progress and doesn't work yet (however do
install postgres if you want to use RPostgreSQL package to connect to
other databases)
** postgres
kudos2 http://wiki.postgresql.org/wiki/YUM_Installation
vi /etc/yum.repos.d/CentOS-Base.repo
append: exclude=postgresql* to [base] and [updates] sections
# On Red Hat: /etc/yum/pluginconf.d/rhnplugin.conf [main] section 
# find rpm at http://yum.postgresql.org/
#+name:postgres
#+begin_src sh :session *shell* :exports none :eval yes :results silent
curl -O http://yum.postgresql.org/9.1/redhat/rhel-6-x86_64/pgdg-centos91-9.1-4.noarch.rpm
#+end_src
# curl -O http://yum.postgresql.org/9.1/redhat/rhel-6-x86_64/pgdg-redhat91-9.1-5.noarch.rpm
#+name:install rpm
#+begin_src sh :session *shell* :exports none :eval yes :results silent
rpm -ivh pgdg-centos91-9.1-4.noarch.rpm
#+end_src
# rpm -ivh pgdg-redhat91-9.1-5.noarch.rpm
kudos2
http://www.davidghedini.com/pg/entry/install_postgresql_9_on_centos

#+name:install postgres
#+begin_src sh :session *shell* :exports none :eval yes :results silent
# yum list postgres*
# install a basic PostgreSQL 9.1 server:
yum install postgresql91-server postgresql91 postgresql91-devel postgresql91-libs postgresql91-contrib
#+end_src
#+name:initialise postgres
#+begin_src sh :session *shell* :exports none :eval yes :results silent
service postgresql-9.1 initdb
#+end_src
#+name:start postgres
#+begin_src sh :session *shell* :exports none :eval yes :results silent
service postgresql-9.1 start
#+end_src
NB skipped 4 Placing the binary directory in the path for postgres will allow you to invoke pg_ctl and other commands from the shell.
Set postgres Password
#+name:set pwd
#+begin_src sh :session *shell* :exports none :eval no :results silent
su - postgres
psql postgres postgres
alter user postgres with password 'password';
CREATE ROLE gislibrary LOGIN PASSWORD 'gislibrary';
#+end_src
Configure PostgreSQL 9 pg_hba.conf File
edit your pg_hba.conf file under /var/lib/pgsql/9.1/data
I added a super user from my ip address and allowed all the local ip addresses access
host    all             postgres        my.desk.ip.address/32       md5
host    all             gislibrary      0.0.0.0/0                   md5




# look at a working pg_hba.conf file and copy, especially trusts
#+name:restart
#+begin_src sh :session *shell* :exports none :eval no :results silent
# still connected to psql
select pg_reload_conf();
# logout? or \q?
#+end_src
make it listen for the world
Locate the postgresql.conf file under /var/lib/pgsql/9.1/data.
listen addresses '*'
# sudo service postgresql-9.1 restart
chkconfig postgresql-9.1 on
then restart
# failed to start.
GIVING UP 
yum erase postgresql91*

# show listen_addresses;
# show port;
** just install bits required for RPostgreSQL package
vi /etc/yum.repos.d/CentOS-Base.repo
# append: exclude=postgresql* to [base] and [updates] sections
curl -O http://yum.postgresql.org/9.1/redhat/rhel-6-x86_64/pgdg-centos91-9.1-4.noarch.rpm
rpm -ivh pgdg-centos91-9.1-4.noarch.rpm
# kudos2 http://www.davidghedini.com/pg/entry/install_postgresql_9_on_centos
# Many, if not most, third party software and modules are still be set to look for PoistgreSQL's conf file and data directory under their old (pre-version 9) locations.
# You can address this, and make life easier for yourself, by creating a few symlinks from the new locations to the old.
# Symlink 1: Symlink for the binary directory. This is particularly useful as this is the location of the pg_config file
# view plaincopy to clipboardprint?
# so install the basic packages for a database
# install a basic PostgreSQL 9.1 server:
yum install postgresql91-server postgresql91 postgresql91-devel postgresql91-libs postgresql91-contrib
# THIS LINE HERE
ln -s /usr/pgsql-9.1/bin/pg_config /usr/bin  
# now check
R
install.packages('RPostgreSQL')
# works?
** postgis
http://postgis.refractions.net/docs/postgis_installation.html
?
or prefer
http://www.davidghedini.com/pg/entry/postgis_2_0_on_centos
requires postgres, gdal, geos 
#+name:postgis2
#+begin_src R :session *shell* :tangle no :exports none :eval yes
################################################################
# name:postgis2
# yum list postgis*  
yum install postgis2_91.x86_64 postgis2_91-devel.x86_64
#+end_src
failed due to depends?
try 1.5
http://www.davidghedini.com/pg/entry/install_postgresql_9_on_centos
#+begin_src R :session *shell* :tangle no :exports none :eval yes
################################################################
# name:postgis1.5
# yum list postgis*  
yum install postgis91.x86_64 postgis91-utils.x86_64
#+end_src
su - postgres 
createdb pgisdb
psql -d pgisdb -f /usr/pgsql-9.1/share/contrib/postgis-1.5/postgis.sql 
psql -d pgisdb -f /usr/pgsql-9.1/share/contrib/postgis-1.5/spatial_ref_sys.sql
psql pgisdb postgres
grant usage on schema public to gislibrary;
GRANT select ON ALL TABLES IN SCHEMA public TO gislibrary;
grant execute on all functions in schema public to gislibrary;
grant select on all sequences in schema public to gislibrary;
** test loading some shapefiles
on your ubuntu desktop install postgis and gdal (see above)
sudo apt-get install postgis
then let's demo the Tasmanian SLAs:
*** download the shapefiles
#+name:tassla01
#+begin_src R :session *R* :tangle src/tassla01.r :exports none :eval no
  ################################################################
  # name:tassla06
  # ABS spatial units are available at http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/1259.0.30.0022006?OpenDocument
  dir.create('data')
  setwd('data')
  download.file('http://www.abs.gov.au/AUSSTATS/subscriber.nsf/log?openagent&1259030002_sla06aaust_shape.zip&1259.0.30.002&Data%20Cubes&18E90A962EFD4D7ECA25795D00244F5A&0&2006&06.12.2011&Previous',
                'SLA06.zip', mode = 'wb')
  unzip('SLA06.zip',junkpaths=T)
  
  sink('readme.txt')
    cat(paste('Australian Bureau of Statistics Statistical Local Areas 2006
    downloaded on', Sys.Date(),
    '
    from http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/1259.0.30.0022006?OpenDocument')
    )
  sink()
  
  # and load spatial data (sd)
  install.packages('rgdal')
  require(rgdal)
  sd <- readOGR('SLA06aAUST.shp', layer = 'SLA06aAUST')
  # might take a while
  head(sd@data)
  plot(sd)
  dev.off()
  save.image('aussd.Rdata')
  
  ######################
  # tas
  sd2 <-  sd[ sd@data$STATE_CODE == 6,]
   plot(sd2)
   axis(1);axis(2); box()
  # plot(sd, add = T)
   names(sd2@data)
   writeOGR(sd2,'tassla06.shp','tassla06','ESRI Shapefile')
   test <- readOGR(dsn = 'tassla06.shp', layer = 'tassla06')
   plot(test, col = 'grey')
   rm(sd)
  # save.image('tassd.Rdata')
  
#+end_src

*** TODO upload the shp2psql
#+begin_src sh :session *shell* :exports none :eval no
  cd data
  shp2pgsql -s 4283 -D tassla06.shp public.tassla06 > tassla06.sql
  # psql -d pgisdb -U postgres -W -h 115.146.94.209 -f tassla06.sql
  # warning terminal not fully functional?  ran from normal terminal
  # now on the remote server run
  # psql pgisdb postgres
  # GRANT select ON ALL TABLES IN SCHEMA public TO gislibrary;
#+end_src

#+RESULTS:

* geoserver
** TODO install geoserver
# java
# yum install java-1.6.0-openjdk-devel

http://dev.horizon.opengeo.org/opengeo-docs/installation/linux/centos/geoserver.html
cd /etc/yum.repos.d
wget http://yum.opengeo.org/centos/6/x86_64/OpenGeo.repo
yum update
yum search opengeo
yum install opengeo-suite
# --> Finished Dependency Resolution
# Error: Package: opengeo-postgis-2.5-1.x86_64 (opengeo)
#            Requires: postgresql84
# Error: Package: opengeo-geoserver-2.5-1.x86_64 (opengeo)
#            Requires: tomcat5
# Error: Package: gdal-1.8.1-1.el6.x86_64 (elgis)
#            Requires: libcfitsio.so.0()(64bit)
# Error: Package: postgis-1.5.4-1.x86_64 (opengeo)
#            Requires: postgresql84-server
# Error: Package: gdal-1.8.1-1.el6.x86_64 (elgis)
#            Requires: libdapserver.so.7()(64bit)
# Error: Package: opengeo-postgis-2.5-1.x86_64 (opengeo)
#            Requires: postgresql84-contrib
# Error: Package: gdal-1.8.1-1.el6.x86_64 (elgis)
#            Requires: libhdf5.so.6()(64bit)
# Error: Package: opengeo-suite-2.5-1.x86_64 (opengeo)
#            Requires: tomcat5-admin-webapps
# Error: Package: gdal-1.8.1-1.el6.x86_64 (elgis)
#            Requires: libdap.so.11()(64bit)
# Error: Package: opengeo-suite-data-2.5-3.x86_64 (opengeo)
#            Requires: tomcat5
# Error: Package: gdal-1.8.1-1.el6.x86_64 (elgis)
#            Requires: libspatialite.so.2()(64bit)
# Error: Package: gdal-1.8.1-1.el6.x86_64 (elgis)
#            Requires: librx.so.0()(64bit)
# Error: Package: gdal-1.8.1-1.el6.x86_64 (elgis)
#            Requires: libogdi.so.3()(64bit)
# Error: Package: gdal-1.8.1-1.el6.x86_64 (elgis)
#            Requires: libnetcdf.so.6()(64bit)
# Error: Package: gdal-1.8.1-1.el6.x86_64 (elgis)
#            Requires: libdapclient.so.3()(64bit)
# Error: Package: postgis-1.5.4-1.x86_64 (opengeo)
#            Requires: postgresql84
#  You could try using --skip-broken to work around the problem
#  You could try running: rpm -Va --nofiles --nodigest



yum update
# #You can then install the OpenGeo Suite by typing:
yum install opengeo-suite
#not work?
#http://tech.gaeatimes.com/index.php/archive/how-to-install-jdk-6-java-se-6-tomcat-in-fedora-core-6-fedora-7-in-5-minutes/
# no work?
# http://gis.stackexchange.com/a/19827
# cd /etc/yum.repos.d
# wget http://yum.opengeo.org/centos/5/x86_64/OpenGeo.repo
# yum update
# #You can then install the OpenGeo Suite by typing:
# yum install opengeo-suite
# #Once the installation has completed, you can go to the dashboard by navigating to:
# http://localhost:8080/dashboard/

# # better than
# # http://docs.geoserver.org/stable/en/user/installation/index.html.
** TODO configure geoserver

# DEADLINK? http://www.gistutor.com/geoserver/21-intermediate-geoserver-tutorials/38-configuring-geoserver-proxy-for-public-and-remote-data-access.html
NB is the default memory setting too low?  Ran out of memory pretty quick.
* emacs24
This is optional but useful for complex GIS projects.
** X server
# note this also depended on selinux disabled.
yum install xterm 
yum install x11vnc.x86_64
yum groupinstall "X Window System"
** emacs24 preview
kudos2 http://jonebird.com/2011/12/29/installing-emacs-v24-on-fedora/
#+name:emacs24
#+begin_src sh :eval no
# yum install gcc
cd /usr/local/share
wget http://alpha.gnu.org/gnu/emacs/pretest/emacs-24.1-rc.tar.gz
gunzip < emacs-24.1-rc.tar.gz | tar xf -
cd emacs-24.1
sudo yum -y install atk-devel cairo-devel freetype-devel \
  fontconfig-devel dbus-devel giflib-devel glibc-devel gtk2-devel \
  libpng-devel libjpeg-devel libtiff-devel libX11-devel libXau-devel \
  libXdmcp-devel libXrender-devel libXt-devel libXpm-devel \
  ncurses-devel xorg-x11-proto-devel zlib-devel librsvg2-devel \
  m17n-lib-devel libotf-devel autoconf automake bzip2 cairo texinfo \
  gzip GConf2-devel alsa-lib-devel desktop-file-utils python2-devel \
  python3-devel util-linux
./configure --prefix=/usr/local/emacs24 --with-dbus --with-gif=no --with-jpeg --with-png \
  --with-rsvg --with-tiff --with-xft --with-xpm --with-x-toolkit=gtk
make
./src/emacs --version # Look good? The INSTALL doc suggests testing: ./src/emacs -Q
sudo make install
sudo alternatives --install /usr/bin/emacs emacs /usr/local/emacs24/bin/emacs 20000
sudo alternatives --install /usr/bin/emacsclient emacsclient /usr/local/emacs24/bin/emacsclient 20000
#+end_src

** kjhealy starter kit
#http://kieranhealy.org/emacs-starter-kit.html
# log in as your user
#step 0.4 Note your user name or the name of your computer.
#[ivan_hanigan@i-000015bf ~]$ whoami
#ivan_hanigan
#[ivan_hanigan@i-000015bf ~]$ hostname
#i-000015bf
#set up step 2:                  
# backup emacs.d
ls 
# Lists all the subdirectories in the current directory
# mkdir emacs_backup
# Makes a subdirectory called "key_backup" in the current directory
# cp .emacs.d key_backup
# Copies the id_rsa keypair into key_backup
rm -r ~/.emacs.d
# Deletes the folder
# remove .emacs
rm ~/.emacs
git clone git://github.com/kjhealy/emacs-starter-kit ~/.emacs.d
# 3. Pull in some extra bits of the kit, notably ESS (Emacs Speaks Statistics).
cd ~/.emacs.d/
git submodule init
git submodule update
# 4. Inside the file kjhealy.org, change the paths to any BibTeX databases as described at the top of that file.
#5. Finally, change the name of the starter kit’s kjhealy.org to that of %your-username%.org or %your-systemname%.org, based on the information you noted in 0.3 above. These files are where you can add in any of your own existing or future customizations without breaking the starter kit’s overall setup.
#6. Launch Emacs.
#When you first start Emacs after installing the starter-kit, it will try to contact the ELPA repository in order to download and install some additional packages. Please be patient with it. If it doesn’t get everything first time around, just quit and relaunch Emacs, and it will try again.
#7. (Optional.) Once Emacs is up and running, do M-x starter-kit-compile to byte-compile the kit’s files, for slightly faster loading. 
make mods to init.el 
chunks skeletons see below
AND starter-kit-misc.org
  (set-cursor-color "red")

mkdir ~/texmf
mkdir ~/texmf/tex
cd ~/texmf/tex
wget https://raw.github.com/kjhealy/latex-custom-kjh/master/needs-org-mode/org-preamble-pdflatex.sty
wget
https://raw.github.com/kjhealy/latex-custom-kjh/master/needs-org-mode/org-preamble.sty
wget https://raw.github.com/kjhealy/latex-custom-kjh/master/needs-org-mode/org-preamble-xelatex.sty
# not sure about this one if you have full tex install
yum install texlive*
#wget https://raw.github.com/kjhealy/latex-custom-kjh/master/needs-memoir/memoir-article-styles.sty
sudo texhash
# or just minionpro?
# http://ctan.org/tex-archive/fonts/minionpro
# gah this can be avoided by this package
# kudos2 http://tex.stackexchange.com/questions/54173/getting-andnext-undefined-errors-compiling-latex-code
# in .emacs.d/user.org change
# minted,minion org preamble
# to
# "" "hyperref" 
# and minted to listings
# BUT ERROR on code chunks (looks bad)
try install pygments
rpm -ivh http://pypi.python.org/packages/any/s/setuptools/setuptools-0.6c11-1.src.rpm
# nothing happened
# back to change hyperref back to org preamble
cd ~/texmf/tex
wget http://www.tug.org/texlive/devsrc/Master/texmf-dist/tex/latex/bera/beramono.sty
sudo texhash
wget http://www.tex.ac.uk/CTAN/macros/latex/contrib/etoolbox/etoolbox.sty
sudo texhash
wget http://mirrors.ctan.org/macros/latex/exptl/biblatex/latex/biblatex.sty
wget http://mirrors.ctan.org/macros/latex/contrib/logreq/logreq.sty
wget http://mirrors.ctan.org/macros/latex/contrib/logreq/logreq.def
sudo texhash
# and after all that it still fails to publish the code blocks
# go back to .emacs.d/user.org and change back to hyperref
# this at least allows printing the outputs
** or just ESS on redhat
*** test 5.13
cd /usr/local/share/emacs-24.1/site-lisp 
# and download Ess
wget http://ess.r-project.org/downloads/ess/ess-5.13.tgz
gunzip < ess-5.13.tgz | tar xf -
cd ess.5.13
make
make install

Again using XLauch lets test ESS with Emacs.
Firstly logged in as "dave" we need to create .emacs file with the following
#(load "/usr/local/share/emacs-24.1/site-lisp/ess-5.13/lisp/ess-site")
# kudos2 http://vislab-ccom.unh.edu/~schwehr/rt/9-bash-scripting.html
(load "/usr/local/share/emacs-24.1/site-lisp/ess-5.13/lisp/ess-site")
; Must have org-mode loaded before we can configure org-babel
(require 'org-install)

; Some initial langauges we want org-babel to support
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (sh . t)
   (python . t)
   (R . t)
   (ruby . t)
   (ditaa . t)
   (dot . t)
   (octave . t)
   (sqlite . t)
   (perl . t)
   ))

; Add short cut keys for the org-agenda
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)

#this file will need to be in each users home directory.
#add any orgmode additions too? or is that in init.el?
#create ~/org/overview.org
#also add to ~/.emacs
(find-file "~/org/overview.org")
;;disable the splash screen (to enable it agin, replace the t with 0)
(setq inhibit-splash-screen t)
(setq org-startup-truncated nil)
;;enable syntax highlighting
(global-font-lock-mode t)
(transient-mark-mode 1)

(define-skeleton org-skeleton
  "Header info for a emacs-org file."
  "Title: "
  "#+TITLE:" str " \n"
  "#+AUTHOR: Ivan Hanigan\n"
  "#+email: ivan.hanigan@anu.edu.au\n"
  "#+LaTeX_CLASS: article\n"
  "#+LaTeX_CLASS_OPTIONS: [a4paper]\n"
  "-----"
 )
(global-set-key [C-S-f4] 'org-skeleton)

(define-skeleton newnode-skeleton
  "Info for a newnode chunk."
  "Title: "
  "#+name:" str "\n"
  "#+begin_src R :session *R* :tangle transformations_overview.r :exports none :eval no\n"
  "\n"
"newnode(name='" str "', \n"
" inputs = '" str "', \n"
" outputs = NA \n"
" )\n"
  "#+end_src\n"
)
(global-set-key [?\C-x ?\C-/] 'newnode-skeleton)

(define-skeleton chunk-skeleton
  "Info for a code chunk."
  "Title: "
  "#+name:" str "\n"
  "#+begin_src R :session *R* :tangle main.r :exports none :eval no\n"
  "\n"
  "#+end_src\n"
)
(global-set-key [?\C-x ?\C-\\] 'chunk-skeleton)

(define-skeleton insertgraph-skeleton
  "Info for a insertgraph."
  "graph file: "
  "\\begin{figure}[!h]\n"
  "\\centering\n"
  "\\includegraphics[width=\\textwidth]{" str "}\n"

  "\\caption{" str "}\n"
  "\\label{fig:" str "}\n"
  "\\end{figure}\n"
  "\\clearpage\n"
)
(global-set-key [?\C-x ?\C-.] 'insertgraph-skeleton)




try hist(rnorm(1000,1,2))
*** testing with ess 5.14 (failed?)
cd /usr/local/share/emacs-24.1/site-lisp/
# and download Ess (one version prior to latest)
wget http://ess.r-project.org/downloads/ess/ess-5.14.tgz
gunzip < ess-5.14.tgz | tar xf -
cd ess.5.14
make
make install

Again using XLauch lets test ESS with Emacs.
Firstly logged in as "dave" we need to create .emacs file with the following
(load "/usr/local/share/emacs-24.1/site-lisp/ess-5.14/lisp/ess")
this file will need to be in each users home directory.

** taskjuggl
